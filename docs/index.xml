<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>home on 日拱一卒</title>
    <link>http://blog.lijinchao.com/</link>
    <description>Recent content in home on 日拱一卒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 25 Nov 2020 01:36:15 +0800</lastBuildDate><atom:link href="http://blog.lijinchao.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>前言</title>
      <link>http://blog.lijinchao.com/blockchain/start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/start/</guid>
      <description>【比特币0.2.10源码分析】前言 目录 项目地址  最早在12年左右，比特币还几十美元的时候，我用当时的台式机下载了程序，准备研究一下。惜呼，当时还在沉迷dota，没有入币圈，后来就再无机会。如今已是价格横在一万多美元两年了，让人扼腕。
  18年的时候，算法，区块链，都是大热的方向；当时转做了人脸算法应用，如今已是两年过去，算法也是迎来了一个小的寒冬；加之，公司业务变化，又做回了业务。
  近一年，以太坊的DeFi应用层出不断，数字人民币的推进，也使得区块链技术不断被提起。每次想要深究这些背后的技术时，总有雾里看花的缺憾。所以，20年十一的时候要下定决心，研究透彻区块链。
  提起区块链，就绕不开比特币，所以这个系列的文字就从比特币0.2.10的源码说起。如果还继续研究，会结合比特币最新的代码变化了解一下。而再深入下一步可能会看看以太坊的技术。
 </description>
    </item>
    
    <item>
      <title>项目运行</title>
      <link>http://blog.lijinchao.com/blockchain/running/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/running/</guid>
      <description>【比特币0.2.10源码分析】项目运行 目录 项目地址 makefile 0.2.10比起早起的已经支持多个系统，这个项目是基于0.2.10的代码，做了一定的修改。 makefile.osx中主要实现了ui和无ui程序的编译。 make -f makefile.osx bitcoin make -f makefile.osx bitcoind  项目相关库  boost@1.55 openssl使用了1.0.2t，brew支持的最低版本跑步起来。所以找了这个更低版本才把程序跑起来 berkeley-db@4 wxwidgets用了3.0版本  项目相关库升级  以上依赖基本都跟0.2.10的依赖版本不同了，毕竟过了10年，变化太大。好在兜兜转转，把程序运行了起来
  在后来对界面做些修改的时候，碰到不少麻烦。wxwidgets这个可与Qt相比的跨平台UI库，对我来说是第一次接触，不知道怎么开发。网上搜到用code::blocks，结果官网上mac版本是几年前发布的了，还是32位的程序，不支持64位的mac。好不容易找到一个64位版本，却一直崩溃。一度想放弃，后来找到wxFormbuider，可以对ui配置fbp文件修改，生成UI代码，才继续了下去。但也要花些时间，学习UI的开发。wxwidgets跟Qt，MFC之类的有些相似，所以了解起来也是很快。
  最终，比特币0.2.10版本的代码，主要的cpp文件才10个，一万多行代码，修改起来并不太困难。
 </description>
    </item>
    
    <item>
      <title>项目框架</title>
      <link>http://blog.lijinchao.com/blockchain/arc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/arc/</guid>
      <description>【比特币0.2.10源码分析】项目框架 目录 项目地址 入口模块init 继承wxApp，实现了几个生命周期方法 Initialize OnInit 解析命令参数,开启了多个模块任务的执行，单列详解 OnInit详解 BindListenPort 监听默认8333端口，等待其他node节点的连接 LoadAddresses 加载node节点地址 LoadBlockIndex 加载区块 LoadWallet 加载钱包秘钥，交易信息等 ReacceptWalletTransactions 未详细了解 CreateMainWindow 创建wxwidgets的主界面 StartNode 在net模块，node节点的处理都在此；单列详解 ThreadRPCServer 监听8334端口，用于命令行对服务的rpc调用执行  UI文件 uibase.cpp是wxwidgets生成的 ui.cpp是 命令行版本 通过wxUSE_GUI宏定义的关闭，开启这个版本的编译  主逻辑文件main 定义了核心的类 CTxIn 交易入 CTxOut 交易出 CTransaction，CMerkleTx，CWalletTx 层层继承的交易记录 CBlock 区块，包含交易记录 CBlockIndex 区块索引，只有交易记录的hashMerkleRoot记录 定义了核心业务方法：节点间的消息收发ProcessMessages,SendMessages，挖矿方法BitcoinMiner都在此。  网络处理模块net 定义了核心的网络类 CMessageHeader 消息头 CAddress 地址 CInv 节点间block和tx广播使用的结构体 CNode 网络节点类，封装了消息收发的逻辑 CDataStream 虽然定义在serilize，但这个模块用的最多，用于消息网络传输时候的序列化 网络处理的总入口StartNode ThreadIRCSeed 用于irc聊天室的注册和定义，主要为了获取比特币网络上存在节点的信息。在这个项目中，被我关闭了。 ThreadSocketHandler 收发原始数据；接受连接的socket线程，创建CNode，标记入站请求节点，fInboundIn=true ThreadOpenConnections 根据获取的比特币节点信息，发起的socket连接，并创建CNode，标记非入站请求节点，fInboundIn=false ThreadMessageHandler 用于原始数据的上层逻辑分发。 GenerateBitcoins 用于开关挖矿线程 loop循环，用于监视错误，重启ThreadSocketHandler线程  其他 其他模块不再详解，由前面的业务引出讲解 base58模块 公钥的处理方法。比特币早一些的版本使用的是椭圆加密算法的公钥，这个版本已经使用公钥hash值（160位）的base58了。 bignum模块 大数处理。 想了解比特币出块难度的实现，需要了解这个模块。 db模块，包含了CTxDB区块索引存储，CAddrDB节点地址存储，CWalletDB秘钥，用户交易记录存储。这三着都继承在CDB，一个封装了berkeley-db的基础类 irc模块，用于注册和获取节点地址 key模块，对openssl的椭圆加密算法做了封装 rpc模块，用于客户端命令调用rpc方法的处理 script模块。定义了CScript类，是区块链签名的核心。定义的多种指令，是智能合约的基础。 sha模块，挖矿方法调用的hash方法就在此处  </description>
    </item>
    
    <item>
      <title>比特币的一些疑惑</title>
      <link>http://blog.lijinchao.com/blockchain/questions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/questions/</guid>
      <description>【比特币0.2.10源码分析】比特币的一些疑惑 目录 项目地址 4年减半的实现  出块的收益计算公式为： GetBlockValue为(50 * COIN) &amp;gt;&amp;gt; (nBestHeight / 210000)，210000次大概是4年，所以4年减半，最终为0. 挖矿难度的如何控制？何为工作量证明？  更多可了解[【比特币0.2.10源码分析】挖矿过程](./minner.md) 奖励机制如何获取手续费？  更多可了解[【比特币0.2.10源码分析】挖矿过程](./minner.md) 为何10分钟出一块？为何一块要限制大小？为何比特币交易速度限制在一秒几笔？  出块的时候，限定了可包含交易记录的大小不能超出MAX_SIZE/2，大概是是1M（这个版本貌似是32/2=16M?） 大概是两千笔交易记录。所以一秒钟平均大概三四笔交易的速度。 交易速度的快慢，由出块速度和出块大小限制。 而区块的同步到全网的时间，又跟区块的大小有关。 有研究表明，当前比特币同步全网大概是12s，中位数6m，越大越慢。 而同步慢的后果，会导致节点的不可信，降低算力攻击的难度。 理论上是51%才能颠覆共识，会因为网络同步的缓慢，而降到更低的阈值。 新的一些币种，都在降低出块时间，加大块的上限；以实现加速交易的目的 更多可了解[【比特币0.2.10源码分析】挖矿过程](./minner.md) 为何需要6次确认？Coinbase的120次成熟时间？  6次确认是区块有6个以上子块，才当做这个区块的交易被确认。 之所以有这个机制，是区块分叉高度为6的可能性很低，几乎可以认定不可能通过算力攻击推翻这次交易。 Coinbase的120次成熟，是指挖到的比特币，不能在6次确认后，马上使用，必须等到120次确认之后，方可使用。 原因是coinbase一旦发生交易，如果因为分叉的原因，需要撤销coinbase之后的所有交易，对整个区块链将是不可接受的。 想想一下你的收到的钱忽然不翼而飞，而且还无法要求转账的人继续转账，因为最早转账的人（coinbase）也没有钱了！！ 所以限定在120次确认coinbase才可交易，就是为了避免这种情况的发生。 出现120高度的分叉，可能性就更小了。 比特币2020年的算力分布情况如何？ H/s ： 是最小的单位，每秒做一次计算机随机的hash碰撞，就叫做Hash/s 单位简写成 H/s KH/s : 1KH/s=1000H/s 通常 K=千的意思，每秒1,000次哈希 MH/s ：1MH/s=1000KH/s M是兆，1M=1000千 ，1MH/s=每秒1,000,000次哈希 GH/s：1GH/s =1000MH/s 每秒1,000,000,000次哈希。 TH/s ：1 TH/s =1000GH/s 每秒1,000,000,000,000次哈希。 PH/s：1 PH/s =1000TH/s 每秒1,000,000,000,000,000次哈希。 EH/s：1 EH/s =1000PH/s 每秒1,000,000,000,000,000,000次哈希。 比特币全网算力在20年10月的时候，大概100eh/s=100000PH/s,比特大陆的矿池算力大概是20eh/s,占全网的五分之一。 我的mac大概10万h/s 1台蚂蚁矿机S9，1320W，13.</description>
    </item>
    
    <item>
      <title>节点管理</title>
      <link>http://blog.lijinchao.com/blockchain/nodes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/nodes/</guid>
      <description>【比特币0.2.10源码分析】节点管理 目录 项目地址  ThreadSocketHandler是收发原始数据；接受连接的socket线程，创建CNode，标记入站请求节点，fInboundIn=true
 loop循环 循环节点vNodes，处理断线逻辑 节点fDisconnect被标记，或者无引用并且无待收发的数据，即可执行清理逻辑 循环断线节点vNodesDisconnectedCopy，等待所有的锁被释放。 更新nPrevNodeCount，更新UI 预处理socket数据，为执行select做准备 执行select FD_ISSET(hListenSocket, &amp;amp;fdsetRecv) 处理8333端口，是否有新节点请求 执行以下的创建逻辑，标记入站请求节点，fInboundIn=true CNode* pnode = new CNode(hSocket, addr, true); pnode-&amp;gt;AddRef(); CRITICAL_BLOCK(cs_vNodes) vNodes.push_back(pnode); 遍历vNodes 处理消息接收；主要是加锁，调用recv，根据接收的数据做相应的处理；正常的目的是将数据缓存至node的vRecv中。 处理消息发送；主要是加锁，调用send。 处理节点超时  ThreadOpenConnections 根据获取的比特币节点信息，发起的socket连接，并创建CNode，标记非入站请求节点，fInboundIn=false
 处理connect参数的地址，执行OpenNetworkConnection 处理addnode参数的地址，执行OpenNetworkConnection loop 如果vNodes数目大于等于nMaxConnections（15），就不再增加节点连接了。 做各种处理，获取需要连接的节点地址，如果存在就调用OpenNetworkConnection  OpenNetworkConnection 连接节点地址
 OpenNetworkConnection ConnectNode创建CNode ip已经连接，就返回 ConnectSocket 创建socket 用socket创建new CNode(hSocket, addrConnect, false); 设置fNetworkNode=true pnode-&amp;gt;PushMessage(&amp;quot;getaddr&amp;quot;); 节点连接成功后，获取更多网络节点。 pnode-&amp;gt;PushMessage(&amp;quot;subscribe&amp;quot;, nChannel, nHops); 需要探究  ThreadMessageHandler 用于原始数据的上层逻辑分发。
 while (!fShutdown) 遍历vNodes，AddRef 遍历vNodes，并随机出pnodeTrickle ProcessMessages 处理接受消息 loop 根据pchMessageStart，搜索出vRecv的开始点 读出消息头 CMessageHeader hdr 根据消息头，读出strCommand和消息体vMsg 调用ProcessMessage，这段处理逻辑比较多，可看姊妹篇【数据同步】 SendMessages 处理发送消息 为获取version消息前，不做任何处理。version消息如果未处理通过，节点就是无效的 节点发送ping消息 每天将本服务的地址设置进入vAddrToSend，为广播地址做准备 随机到的fSendTrickle节点，才有资格将本服务的地址广播出去。 遍历vInventoryToSend，将CInv结构缓存的block或tx记录，以消息头inv的形式，发送到节点缓冲区，告诉对方有新的数据。 遍历mapAskFor，将CInv结构缓存的block或tx记录，以消息头getdata的形式，发送到节点缓冲区，告诉对方，我需要这些数据。 </description>
    </item>
    
    <item>
      <title>数据同步</title>
      <link>http://blog.lijinchao.com/blockchain/data_sync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/data_sync/</guid>
      <description>【比特币0.2.10源码分析】数据同步 目录 项目地址 连接到新节点触发的同步过程  节点A收到节点B的version信息，会触发后续一系列的消息。 核心的是A回复B消息getblocks，询问B需要同步哪些区块； B回复A消息inv，告知A需要同步的区块列表； A回复B消息getdata，向B拉去最新的区块。 下面是详细的过程。
 回复verack消息 节点B：处理verack 设置vRecv的版本 回复getblocks消息，fAskedForBlocks标志决定节点只在第一次收到version消息是回复 节点B：处理getblocks CBlockIndex* pindex = locator.GetBlockIndex(); 如果节点A的区块落后，则返回节点A最新的区块。只有这种情况，节点B才需要广播区块。 如果节点A的区块先进，则返回节点B最新的区块。 pindex如果存在就更新成下一个区块 节点A区块落后，则更新成节点A下一个区块 节点A区快先进，则更新为空 int nLimit = 500 + locator.GetDistanceBack(); 限定节点B通知节点A拉去区块的个数 GetDistanceBack是获取节点A落后节点B的区块个数。不落后则返回0. 遍历pindex，及其之后的区块， 遇到终止区块或者空区块，就停止 调用PushInventory，将CInv区块广播消息插入vInventoryToSend队列 在处理发送消息的时候，批量推送pto-&amp;gt;PushMessage(&amp;quot;inv&amp;quot;, vInv)， vInv是vector&amp;lt;CInv&amp;gt; 之所以PushInventory不直接发送区块广播，是想按批次广播。 如果超出nLimit，则记录当前区块到hashContinue，停止遍历。 节点A：处理inv（当节点A落后的情况）（事实上inv消息不止广播区块，交易记录亦可以被广播） 遍历收到的vector&amp;lt;CInv&amp;gt; CNode调用AddInventoryKnown，将inv插入setInventoryKnown，表示这个区块节点A已经知晓 猜测避免的一种情况是：如果后续有一些其他节点广播的消息发给A，恰好A准备发给B，则可以过滤掉。 bool fAlreadyHave = AlreadyHave(txdb, inv); 判断A是不是已经收到区块数据。 没有收到： 则调用AskFor，将inv插入到CNode的mapAskFor中，以及全局变量mapAlreadyAskedFor中。 在处理发送消息的时候，批量推送pto-&amp;gt;PushMessage(&amp;quot;getdata&amp;quot;, vGetData); 遇到重复插入的记录，需要将于上次插入时间间隔两分钟，避免短时间连续请求。 说不定请求的区块在路上，到达了就会将mapAskFor清除。 或者赶上批次，就能去掉重复请求了。 有收到，并且是孤儿区块： 调用pfrom-&amp;gt;PushGetBlocks(pindexBest, GetOrphanRoot(mapOrphanBlocks[inv.hash])); 获取最新区块与孤儿区块祖块之间的区块。触发的逻辑，可回到【回复getblocks消息】去执行。 mapRequestCount更新区块被请求次数；针对A尚未存在这个区块的情况，无法更新。 搜索mapRequestCount可看到，只在内存中存在，而且只在创建区块或交易的时候填充。 所以几乎没意义。 节点B：处理getdata消息。 遍历收到的vector&amp;lt;CInv&amp;gt; 如果是拉取区块 在mapBlockIndex中查找，找到索引后，从db中加载完整的区块。 并调用pfrom-&amp;gt;PushMessage(&amp;quot;block&amp;quot;, block)，返回区块数据给A 区块数据较大，所以直接进入发送缓冲区，没有做批次处理 如果当前拉取的区块，刚好等于hashContinue 则广播A最新的CInv(MSG_BLOCK, hashBestChain)消息 之所以没有广播hashContinue到hashBestChain之间的所有CInv消息，是对孤儿块有做处理。 如果是拉取tx 在mapRelay中查找并返回tx消息 节点A：处理block消息 调用AddInventoryKnown，将inv插入setInventoryKnown，表示这个区块节点A已经知晓 ProcessBlock 保存区块，广播区块；这个方法也会在挖到矿的时候调用，可参考【挖矿过程】 其中一块逻辑需要点出，刚好对应了前文hashContinue的处理方法： mapBlockIndex检验是否存在前一个block。 不存在则存入孤儿块中，同时调用pfrom-&amp;gt;PushGetBlocks(pindexBest, GetOrphanRoot(pblock)); 获取最新区块与孤儿区块祖块之间的区块。触发的逻辑，可跳到【回复getblocks消息】去执行。 从而实现了区块同步数据过多，可以递归的不断从pindexBest向前推进。 设计回环之巧妙，叹为观止。 清理mapAlreadyAskedFor 发起交易的同步过程 【比特币0.</description>
    </item>
    
    <item>
      <title>挖矿过程</title>
      <link>http://blog.lijinchao.com/blockchain/miner/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/miner/</guid>
      <description>【比特币0.2.10源码分析】挖矿过程 目录 项目地址  GenerateBitcoins是开启挖矿的入口。会开启指定数目的线程，执行BitcoinMiner
 BitcoinMiner key.MakeNewKey();生成新的秘钥 while (fGenerateBitcoins) unsigned int nBits = GetNextWorkRequired(pindexPrev); 根据当前的block，获取挖矿难度。 难度的表示是bignum的compact，0x1f0002ff为例，共有四字节，第一个字节是后三位数值所在的位置，像是浮点数的表示方法。 网上无资料，这是我理解的结果，有些细节没深究，不完全准确。 转换为大数，为000002ff00000000000000000000000000000000000000000000000000000000。 没有最新的block，则直接返回默认的难度 未达需要从新计算难度的区块高度，则直接返回最新区块的难度 到达14*24*6个区块数，重新计算难度。 找到14*24*6之前的区块pindexLast，计算出两块之间的时间nActualTimespan 新的难度系数计算过程是先设置原有的nBits，得到表示难度的大数bnNew。 bnNew乘以nActualTimespan/nTargetTimespan,(nTargetTimespan=14 * 24 * 60 * 60,两周时间) 返回bnNew.GetCompact() CTransaction txNew; 创建coinbase tx auto_ptr&amp;lt;CBlock&amp;gt; pblock(new CBlock()); 创建block，将txNew作为区块的第一条记录。 while (fFoundSomething &amp;amp;&amp;amp; nBlockSize &amp;lt; MAX_SIZE/2) 遍历已有交易，查找需要打包的交易，插入到block的vtx中；限定size小于MAX_SIZE/2; 遍历mapTransactions（这个在AcceptTransaction收到交易记录时候会设置进去） CoinBase记录跳过 map&amp;lt;uint256, CTxIndex&amp;gt; mapTestPool;临时定义了这个缓存，避免重复从db读取。 tx.ConnectInputs(txdb, mapTestPoolTmp, CDiskTxPos(1,1,1), 0, nFees, false, true, nMinFee) 主要是检验交易是否合法,这个方法不止挖矿使用,在将区块存储db时候也会调用， 下面的方法就是写入区块后，再写入区块索引中 写入索引过程中，先调用ConnectBlock，然后遍历交易，调用ConnectInputs，此时就是fBlock=true, fMiner=false了 if (!WriteToDisk(!fClient, nFile, nBlockPos)) return error(&amp;quot;AcceptBlock() : WriteToDisk failed&amp;quot;); if (!</description>
    </item>
    
    <item>
      <title>存储</title>
      <link>http://blog.lijinchao.com/blockchain/db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/db/</guid>
      <description>【比特币0.2.10源码分析】存储 目录 项目地址 </description>
    </item>
    
    <item>
      <title>余额</title>
      <link>http://blog.lijinchao.com/blockchain/balance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/balance/</guid>
      <description>【比特币0.2.10源码分析】余额 目录 项目地址  余额优化
 要做到瞬时查询，我们知道，使用关系数据库的主键进行查询，由于用了索引，速度极快。 因此，对区块链进行查询之前，首先要扫描整个区块链，重建一个类似关系数据库的地址-余额映射表 有了这样的表，就不用查询某个地址余额的时候，还要扫描全链了。 如果无索引，就要扫描全链条。 在钱包程序中，钱包管理的是一组私钥，对应的是一组公钥和地址。钱包程序必须从创世区块开始扫描每一笔交易，如果： 遇到某笔交易的某个Output是钱包管理的地址之一，则钱包余额增加； 遇到某笔交易的某个Input是钱包管理的地址之一，则钱包余额减少。  验证条目是否属于自己
 CTxIn::IsMine 在mapWallet中根据prevout找到自己的输入CTxOut，判断调用CTxOut的IsMine CTxOut::IsMine 调用script模块的::IsMine(scriptPubKey)，验证CTxOut的公钥 Solver(scriptPubKey, 0, 0, scriptSig) 执行脚本 Solver(scriptPubKey, vSolution) 解码scriptPubKey包含的脚本 填充默认的解码模板vTemplates 遍历解码模板 读取操作码，scriptPubKey的操作码要与模板匹配，否则就验证下一个模板 碰到操作码OP_PUBKEY，读取65字节，将pair插入PAIRTYPE(opcodetype, valtype)&amp;amp; vSolutionRet 碰到操作码OP_PUBKEYHASH,读取32字节，将pair插入PAIRTYPE(opcodetype, valtype)&amp;amp; vSolutionRet 遍历PAIRTYPE(opcodetype, valtype)&amp;amp; vSolutionRet 当first为OP_PUBKEY，只需判断钱包里mapKeys是否包含公钥。 当first为OP_PUBKEYHASH，只需判断钱包里mapPubKeys是否包含160位的公钥hash。 Solver里面还有两个参数uint256 hash, int nHashType，是通过SignSignature，调用Solver是使用的。可参见【交易流程】。 CTransaction:IsMine 遍历vout，有一个IsMine是true，就返回true。 这是因为只要有一笔交易属于调用者，就说明有一部分金额转入了调用者的账户里了。  获取余额
 CTxIn::GetDebit 获取支出 在mapWallet中根据prevout找到自己的输入CTxOut，调用CTxOut的nValue CTxOut::GetCredit 获取收入 判断IsMine，通过就返回nValue CTransaction::GetDebit 获取支出 遍历vin，累计GetDebit的结果 CTransaction::GetCredit 获取收入 遍历vout，累计nValue CTransaction::GetValueOut 获取总的累计nValue，不过滤是不是自己的。  transaction的in，out所实现的UTXO(Unspent TX Output)模型，下面的结构示例可以比较直观的说明</description>
    </item>
    
    <item>
      <title>交易流程</title>
      <link>http://blog.lijinchao.com/blockchain/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/transaction/</guid>
      <description>【比特币0.2.10源码分析】交易流程 目录 项目地址  UI的转账入口是SendMoneyToBitcoinAddress，调用SendMoney；RPC的转账入口是SendMoney
 SendMoney 有4个参数。 CScript scriptPubKey是转账目标地址生成的脚本；int64 nValue转账金额；CWalletTx&amp;amp; wtxNew 交易记录，数据都记录在此；bool fAskFee尚未使用。 CreateTransaction 生成签名等 多了两个新参，CKey key 作为转账剩余金额的拥有秘钥；int64 nFeeRequired 费用返回值。 loop循环，起始的费用从全局变量nFee取，如果小于转账必须的费用，会修改nFee，再次循环执行所有下面的逻辑 SelectCoins 根据转账金额，获取发送者所持有的最合适的set&amp;lt;CWalletTx*&amp;gt;&amp;amp; setCoinsRet； 遍历发送者的mapWallet；刚好有金额相符的记录，直接返回；反之，小于转账金额的记录，累加到nTotalLower，缓存记录到vValue； 大于的则找到最小的记录pcoinLowestLarger，以备使用。 如果nTotalLower不足，则pcoinLowestLarger直接返回。 如果nTotalLower充足，则要随机1000次，找到大于等于转账金额的最小组合记录。 如果SelectCoins未找到足够的记录，则转账失败。 nValueIn获取可用转账记录的总金额 fChangeFirst随机决定是先记录接收者的收款条目，还是余额条目（如果没有余额则略过）。 处理完out，再处理in； 遍历可用的记录，再遍历所有的out；out不属于发送者的跳过；用CWalletTx的hash和out所在的位置生成in条目。 遍历可用的记录，再遍历所有的out；out不属于发送者的跳过；调用SignSignature对wtxNew记录中的所有新生成的in条目签名。 SignSignature 尚未详读，单列详解； 核心是生成in条目的签名 AddSupportingTransactions 尚未详读，感觉的处理默克尔树。 CommitTransaction 存储，广播等 上一步如果有生成新的秘钥，存入钱包；如果没存入，余额就丢了。 AddToWallet 缓存到mapWallet 记录fInsertedNew和fUpdated，决定是否调用WriteToDisk，存储到db 更新默认私钥 插入vWalletUpdated，用于更新UI mapRequestCount设定交易记录被请求次数 wtxNew.AcceptTransaction 逻辑很多，留待详解 检验交易是否合法 ConnectInputs 处理db等很多业务在此 wtxNew.RelayWalletTransaction(); 遍历vtxPrev， 所有前任存储成功的情况下， 调用RelayMessage(CInv(MSG_TX, hash), (CTransaction)tx)，中继广播交易。 将tx转换为CDataStream，调用RelayMessage mapRelay存储inv和tx，并在vRelayExpiration中记录时间对 调用RelayInventory 遍历所有节点，调用PushInventory，广播交易记录 setInventoryKnown中已经存在的过滤 vInventoryToSend中插入inv 在处理发送消息的时候，批量推送pto-&amp;gt;PushMessage(&amp;quot;inv&amp;quot;, vInv)， vInv是vector&amp;lt;CInv&amp;gt; 之所以PushInventory不直接发送区块广播，是想按批次广播。 更详细的过程可参见【数据同步】 对当期交易执行RelayMessage，参加上文逻辑  签名的过程</description>
    </item>
    
    <item>
      <title>交易流程</title>
      <link>http://blog.lijinchao.com/blockchain/merkle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blog.lijinchao.com/blockchain/merkle/</guid>
      <description>【比特币0.2.10源码分析】默克尔树 目录 项目地址 </description>
    </item>
    
    <item>
      <title>鸣谢</title>
      <link>http://blog.lijinchao.com/credits/</link>
      <pubDate>Wed, 25 Nov 2020 01:34:22 +0800</pubDate>
      
      <guid>http://blog.lijinchao.com/credits/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
